// Code generated by go-bindata.
// sources:
// data/index.html
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x4d\x73\xd3\x30\x10\xbd\xe7\x57\x08\x5d\xec\x4c\x5b\xbb\xc3\x09\xa8\x93\x19\x28\x65\x18\x86\xb6\x87\x96\xe9\x81\x72\x50\xac\x75\x2c\x90\x25\x8f\xa4\x7c\xd1\xc9\x7f\x67\x95\xd8\x8e\x13\x3b\x94\x1e\xc8\x25\x96\xf4\xf6\xbd\xdd\xd5\x6a\x37\xc9\x5d\x21\xc7\x83\x24\x07\xc6\xf1\xaf\x00\xc7\x48\x9a\x33\x63\xc1\x8d\xe8\xb7\xfb\x4f\x67\x6f\x28\x89\xf1\xc0\xa6\x46\x94\x6e\x3c\x20\xd5\x6f\xce\x0c\xc9\x04\x48\x7e\xcd\x4a\x32\x22\x4f\xeb\x8b\xe6\x28\x9b\xa9\xd4\x09\xad\x48\x6a\x80\x39\x78\x50\x3c\x4c\x59\xe9\x77\x86\xe4\x69\xd0\xc0\xda\x4c\xfe\x1c\x59\xb8\x4e\x67\x05\x28\x17\x6d\x2d\xaf\x24\xf8\x55\x48\xb9\x98\xd3\xe1\x45\x6d\xd0\xcb\xd0\x63\x7e\x0f\x4b\x77\xa3\x39\x34\xea\x17\x1d\x4b\x7f\x12\xb1\xb2\x04\xc5\x2f\x73\x21\x79\xe8\x76\x32\x47\x7e\x1d\x8e\x46\x75\xa2\xf9\x6a\x8f\xcc\xb3\x1f\x13\xb5\x6e\x25\x21\xca\xb4\x72\x77\xe2\x37\xa0\xf3\x74\xb9\x3c\x93\xcc\x4c\x81\x76\x2d\x36\x01\x2e\xdd\x7b\x0c\xeb\x2f\x59\x72\x18\x2f\xc3\x2d\x9f\xaa\x17\x78\x59\x11\xf7\x38\x7a\xdc\xe6\x98\x0b\x13\x43\x87\xff\x93\x28\x8e\xeb\x3c\x54\x09\xcc\x41\x4c\x73\x7f\xf7\x01\x9b\x39\x1d\x74\x2d\xf6\xe1\x0b\xc1\x5d\xee\xd1\x6f\xcf\xcf\xcb\xe5\xb3\xf0\x1d\xfb\xeb\x7f\xc2\x1b\xb0\xdb\xcb\x0c\xe6\x60\x9c\x48\x99\xec\x31\xa9\x5f\xcd\xf7\xaa\x2c\x7f\x20\xbe\xa2\x69\xb0\xeb\xc1\xde\x43\xb3\x60\x90\xd0\xea\xf4\x17\x78\x6f\x14\x2c\xc8\x03\x4c\xee\x36\xeb\x90\x2e\xec\xbb\x38\xa6\xe4\x84\x2c\x84\xe2\x7a\x11\x49\x9d\x32\x4f\x1c\xe5\xda\x3a\xdc\xa6\xf1\xc2\xd2\x56\x32\xdb\x6c\x91\x56\x1a\x6f\x03\x49\xeb\x57\x1b\xfa\x47\x7a\xe0\x72\xb7\x84\xb5\xb2\x1a\x03\x96\x7a\x1a\xba\x5c\xd8\x68\x66\x64\xcf\x75\xb5\xe2\x39\x22\x5e\x80\xb5\x6c\x0a\x6d\x7d\x40\x07\xfa\x74\x7d\x22\xf4\xe4\x27\x42\xbf\xdc\xdd\xde\x44\xa5\xef\x51\x21\x44\x9c\xb9\xc3\xda\x15\x59\xd8\x24\x19\x2d\xa2\xcc\xe8\x02\xb3\x3c\x22\x33\xc5\x21\x13\x0a\x78\x4f\x8c\x9d\xb8\xe8\xa6\x24\x85\x9a\xd2\x61\x3f\xb6\xe9\x6e\xb5\xc6\x3e\x6e\x7d\xe8\x93\x5b\x95\xa0\xb3\x0d\xba\xb0\xd3\x21\x79\x85\x75\x62\x9d\x41\x85\xa0\x5f\xa1\x1b\x44\x34\x67\x72\x06\xe4\xa4\xca\xc1\xd6\x5a\x64\xab\x9a\xf4\x94\xa8\x99\x94\xa7\x24\x78\x74\xc1\xd0\x5f\xfd\xa3\x3a\x68\x27\x20\x2d\xbc\x58\xac\x62\xaf\xf9\x06\xcf\xd8\xe1\xac\xd0\x52\xde\x6b\x3f\x18\x8e\x1e\x7f\xde\xbc\xad\x9d\x73\xbb\x5a\x69\xef\x35\x9f\xf8\xf2\x1f\x8c\x70\x40\xea\x8a\xc1\xf9\x62\x20\x05\x31\x87\x3e\x78\xab\xe7\x30\xce\xaf\xe6\xf8\xf1\x55\x58\x07\x0a\x4c\x48\x3f\xde\x5e\x5f\x62\xe3\xf5\x7b\x9a\x71\xe0\xf4\xb4\x55\x7d\x1e\x7a\x58\x1e\xbb\xab\xa6\x74\xaf\xd6\xd6\xb8\x4a\xe2\x7a\x36\x26\xf1\x76\x8a\x92\x41\xe2\x1b\xdd\x78\x97\xa8\x04\x27\x18\x11\x7c\x14\xa4\xba\x28\x6c\x30\x4e\x62\xdc\xd8\x0e\xd3\x84\x91\xdc\x40\x36\xa2\x31\x16\x1d\x1d\x7f\x30\x7a\x61\x81\xe0\xb7\x4d\x62\xd6\xcc\x5b\xe4\xde\x52\xa2\x86\x1f\xd8\x7f\x02\x00\x00\xff\xff\x01\xa4\xc3\x51\xb7\x07\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 1975, mode: os.FileMode(420), modTime: time.Unix(1442594568, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
