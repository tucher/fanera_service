// Code generated by go-bindata.
// sources:
// data/index.html
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x55\xbd\x6e\xdb\x30\x10\xde\xfd\x14\x2c\x17\x49\x48\x22\x19\x9d\xd2\xc4\x0e\x50\x04\x2d\x8a\x02\x4d\x87\xa4\xc8\xd0\x74\xa0\xc5\x93\xc5\x96\x22\x05\xf2\xfc\xd7\x20\xef\xde\xa3\x2d\xd9\x0e\x2c\xb9\x4d\x86\x72\xb1\x25\xdd\xf7\x73\x47\xf2\x6e\x54\x62\xa5\xaf\x06\xa3\x12\x84\xa4\x9f\x0a\x50\xb0\xbc\x14\xce\x03\x8e\xf9\xb7\xbb\x8f\x67\xe7\x9c\x65\xf4\xc1\xe7\x4e\xd5\x78\x35\x60\xcd\x9a\x0b\xc7\x3c\xb8\x39\x38\x6f\xf3\x5f\x80\x6c\xcc\x0c\x2c\xd8\x3d\x4c\x6e\xd7\xcf\x31\x5f\xf8\x8b\x2c\xd3\x36\x17\xba\xb4\x1e\x2f\xce\x87\xe7\xc3\x6c\xe1\x79\x72\xf9\x8c\xa3\x50\xa0\xe5\x17\x51\x13\xfe\xf1\x69\xf7\x69\x9f\x3a\xb5\xc6\xd6\x60\x28\xa2\x98\x99\x1c\x95\x35\x71\xc2\x1e\xb7\xa1\x9d\x10\x0f\x46\xc6\xfc\xda\x1a\x03\x6b\x04\x53\x46\xe1\xbe\xf6\xd3\x80\x6d\xff\x67\x19\xbb\x77\x0a\x81\x55\xe0\xbd\x98\x02\xa3\x78\x07\x39\xa8\x39\xf4\x19\x6a\x23\xf7\x3c\x41\x97\xa9\x90\xa2\x9d\xfc\xa4\xb8\xcf\xb7\x5f\x6f\xd2\x3a\x14\x36\x86\x54\x0a\x14\x7b\x66\xda\xa5\x8a\xb8\xad\xc7\x77\x42\xa5\x85\xb3\xd5\x0f\x36\x1e\xb3\x99\x91\x50\x28\x03\xb2\x4b\xa3\x5d\xb9\x35\xde\x6a\x48\xb5\x9d\xc6\x3c\x77\x20\x50\x99\x29\x4f\x06\xbd\x80\x60\x2e\x17\x75\xd8\x3b\x69\xf3\x59\x05\x06\xd3\x35\x0e\x3e\x68\x08\x4f\x31\x97\x6a\x4e\x55\x6b\x01\x47\x99\x3a\x68\xee\x60\x89\x37\x56\x42\xdc\x26\xd3\x91\xf3\xd6\x3d\x19\x49\x45\x4d\x1b\x2d\xaf\x4b\xa5\x65\x8c\x3b\xdd\x9e\xd5\xcb\xb5\xb5\x31\xb1\x72\xf5\x8c\x34\xa8\xfc\xcd\x84\xc7\x15\x55\xb1\xb0\x06\x6f\xd5\xef\xb0\xc5\x7c\xb9\x3c\xd3\xc2\x4d\x81\xf7\x23\xd7\x15\x58\xe2\x7b\xca\xfb\x48\x39\x91\x0a\x22\xe8\x55\xa8\xe9\x2b\xdc\x37\x02\x47\x12\xe8\xc7\xf6\x59\x9a\x38\x9e\xfc\x4f\x42\xba\x6c\x4d\x1a\x4d\xa1\x4b\x50\xd3\x32\x1c\x9e\x48\xcc\xd0\x46\xfd\xc8\xe7\xb0\x85\x92\x58\x06\xd4\xbb\xe1\xb0\x5e\xfe\x33\x6c\xa7\xf6\xf6\x45\x38\x07\x7e\x73\x18\x22\x6a\x03\xa8\xa8\xab\x1d\x81\x76\x5d\xe2\x96\xef\x00\xf4\xd4\xd5\x06\x70\x55\x83\x2d\xd6\xf7\xa6\xf2\xd3\x84\xbd\x21\x61\x8f\x8e\x2e\x74\x94\xbc\x40\x36\x9d\x0b\x3d\x03\x76\xd2\xb4\x9f\x0d\x83\x2a\x56\x2d\xf1\x29\x33\x33\xad\x4f\x59\xf4\x80\x51\xc2\x4e\x18\x7f\x30\x1d\x67\x1c\xb4\x87\x57\x89\x36\x2a\x2d\xef\x01\x47\x07\x96\xe6\x8c\xd5\xfa\xce\x86\x81\xd0\xfb\xf9\xd3\x7a\x13\x0f\x8d\xee\xba\xfb\x65\x68\xef\x83\x51\xd6\x8e\xad\x51\xb6\x19\x70\xf4\x2e\x1c\xe4\xdd\x1c\x1b\x51\x87\x63\x4a\x8e\xa3\xdc\x56\x95\x8f\xae\x46\x19\xbd\x08\xf1\x9b\x30\xc2\x85\xf9\xf8\x27\x00\x00\xff\xff\x13\x6a\x8b\xaa\x26\x07\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 1830, mode: os.FileMode(420), modTime: time.Unix(1442448732, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
