// Code generated by go-bindata.
// sources:
// data/index.html
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x55\x4f\x6f\x9b\x30\x14\xbf\xe7\x53\x78\xbe\x00\x6a\x0b\xd5\x4e\x9b\x4a\x2a\x55\xd5\xa6\x69\xd2\xba\x43\x3b\xf5\xb0\xee\xe0\xe0\x07\x78\x33\x36\xb2\x4d\x9a\x2c\xca\x77\xdf\x33\x81\xfc\x51\x20\x5b\x7b\x98\x2f\x09\xf0\x7e\x7f\xde\xb3\xfd\x5e\x5a\xba\x4a\x5e\x4f\xd2\x12\x18\xc7\x9f\x0a\x1c\x23\x59\xc9\x8c\x05\x37\xa5\xdf\x1e\x3e\x5e\xbc\xa3\x24\xc1\x0f\x36\x33\xa2\x76\xd7\x13\xd2\xad\x39\x33\xc4\x82\x99\x83\xb1\x3a\xfb\x05\x8e\x4c\x89\x82\x67\xf2\x08\xb3\xfb\xf6\x39\xa4\xab\x55\x7c\xc3\xb9\x01\x6b\xd7\x6b\x1a\x5d\x1d\x20\x73\x01\x92\x7f\x61\x35\xa2\x56\xeb\xdd\xa7\x7d\xc2\x58\x2b\x5d\x83\xc2\x88\xbc\x51\x99\x13\x5a\x85\x11\x59\x6d\x43\x07\x21\x16\x14\x0f\xe9\xad\x56\x0a\x5a\x04\x11\x4a\xb8\x7d\xed\xf5\x84\x6c\xff\x27\x09\x79\x34\xc2\x01\xa9\xd0\x22\x2b\x80\x60\xbc\x81\x0c\xc4\x1c\xc6\x0c\xf5\x91\x7b\x9e\x60\xc8\x94\x4f\x51\xcf\x7e\x62\xdc\xe7\xfb\xaf\x77\x71\xed\xcb\x19\x42\xcc\x99\x63\x7b\x66\xfa\x25\xf2\xb0\xaf\xc7\x77\x44\xc5\xb9\xd1\xd5\x0f\x32\x9d\x92\x46\x71\xc8\x85\x02\x3e\xa4\xd1\xaf\x4c\x2b\xab\x25\xc4\x52\x17\x21\xcd\x0c\x30\x27\x54\x41\xa3\xc9\x28\xc0\x9b\xcb\x58\xed\x77\x8c\xeb\xac\xa9\x40\xb9\xb8\xc5\xc1\x07\x09\xfe\x29\xa4\x5c\xcc\xb1\x6a\x3d\xe0\x24\xd3\x00\xcd\x03\x2c\xdc\x9d\xe6\x10\xf6\xc9\x0c\xe4\xbc\x75\x8f\x46\x62\x56\xe3\x46\xf3\xdb\x52\x48\x1e\xba\x9d\xee\xc8\x1a\xe5\xda\xda\x98\x69\xbe\x3c\x20\xf5\x2a\x7f\x33\x61\xdd\x12\xab\x98\x6b\xe5\xee\xc5\x6f\xbf\xc5\x74\xb1\xb8\x90\xcc\x14\x40\xc7\x91\x6d\x05\x16\xee\x06\xf3\x3e\x51\x4e\x87\x05\x61\xf8\xca\xd7\xf4\x15\xee\x3b\x81\x13\x09\x8c\x63\xc7\x2c\xcd\x0c\x8d\xfe\x27\x21\x5e\xb6\x2e\x8d\xae\xd0\x25\x88\xa2\xf4\x87\x27\x60\x8d\xd3\xc1\x38\xf2\x10\xf6\x2c\xb8\x2b\x3d\xea\xfd\xe5\x65\xbd\xf8\x67\xd8\x4e\xed\xed\x8b\x70\xd8\xbd\x36\x87\x21\xc0\x36\xe0\x44\xc6\xe4\x09\xe8\xd0\x25\xee\xf9\x8e\x40\xeb\xa1\x36\xe0\x96\x35\xe8\xbc\xbd\x37\x95\x2d\x22\xf2\x06\x85\xad\x33\x78\xa1\x83\xe8\x05\xb2\xf1\x9c\xc9\x06\xc8\x59\xd7\x7e\x36\x0c\x22\x5f\xf6\xc4\xe7\x44\x35\x52\x9e\x93\xe0\xc9\x05\x11\x39\x23\xf4\x49\x0d\x9c\x71\x90\x16\x5e\x25\xda\xa9\xf4\xbc\x47\x1c\x03\x58\x9c\x2e\x5a\xca\x07\xed\x07\xc2\xe8\xe7\x4f\xed\x26\x1e\x1b\xdd\x75\xf7\x2b\xdf\xde\x27\x69\xd2\x0f\xab\x34\xd9\x8c\x35\x7c\xe7\x0f\xf2\x6e\x7a\xa5\xd8\xe1\x88\xe0\xd3\x20\xd3\x55\x65\x83\xeb\x34\xc1\x17\x3e\x7e\x13\x86\x38\x3f\x15\xff\x04\x00\x00\xff\xff\xf8\x2a\xf6\x65\x1c\x07\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 1820, mode: os.FileMode(420), modTime: time.Unix(1442492659, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
