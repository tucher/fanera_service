// Code generated by go-bindata.
// sources:
// data/index.html
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xc1\x8e\xd3\x30\x10\xbd\xf7\x2b\x46\xbe\x6c\xa2\x8a\x78\x8f\x55\x37\xc9\x61\x11\x08\x24\xb8\xb0\x8b\xf6\xec\xd8\xc3\xc6\xda\xc4\x8e\xec\x49\x4a\x85\xf8\x77\xec\xb8\x29\x91\xda\x4a\xe0\x4b\x3d\xf6\x9b\xe7\xf7\x5e\x27\x65\x4b\x7d\x57\x6f\xca\x16\x85\x0a\x3f\x3d\x92\x00\xd9\x0a\xe7\x91\x2a\xf6\xfd\xf9\xe3\xbb\x1d\x03\x1e\x2e\xbc\x74\x7a\xa0\x7a\x03\xa7\x35\x09\x07\x1e\xdd\x84\xce\x5b\xf9\x86\x04\x15\x18\x3c\xc0\x0b\x36\x4f\x73\x9d\xb1\x83\xdf\x73\xde\x59\x29\xba\xd6\x7a\xda\xef\xee\x77\xf7\x1c\x65\x6b\x59\xfe\xb0\x81\x33\xcf\x9a\xa3\xb0\xc6\x0e\x68\x02\xd5\x8f\xd1\x48\xd2\xd6\x64\x39\xfc\x3a\x43\xaf\xb6\x78\x34\x2a\x63\xef\xad\x31\x38\x77\x80\x36\x9a\xe6\x27\x4e\xeb\xf7\xea\x31\xce\xe1\xc5\x69\x42\xe8\xd1\x7b\xf1\x8a\x10\xf0\x0e\x25\xea\x09\x6f\x09\x5a\x90\x2b\x4d\x78\x4d\x94\xb2\x72\xec\xd1\x50\xf1\x8a\xf4\xa1\xc3\xb8\x7d\x3c\x7e\x56\xd9\x9d\xb4\x7d\xef\xef\xf2\x42\x07\x85\xee\xd3\xf3\xd7\x2f\xb0\xad\x80\x7d\x4b\xaf\xaa\x3d\x30\xd8\x02\x16\x4a\x84\xdc\xb7\xc0\xca\xc6\xd5\x6c\x25\x7e\x1d\xd5\x22\x00\xa2\xe7\xd8\x70\x35\x9d\xf8\xc7\xcc\x6c\xd5\x6d\x4d\x91\x80\xf0\x27\x05\x59\x93\xe8\x46\x7c\xf8\x87\x8c\x23\x67\x7e\x09\xfc\x4f\xdf\x4f\xe1\x3e\x79\xbe\xe5\x38\x18\x2e\xf9\x32\x6d\x25\x4f\x73\x19\xce\x1a\xab\x8e\x7f\xc7\xaf\xd4\x66\x18\x09\xb4\xaa\xd8\x62\x86\x01\x1d\x07\xac\x58\xda\xf3\x0b\x6c\xba\x6d\x46\x22\x6b\xd8\xb9\xf3\x91\x42\x31\x87\x90\x6a\x16\x66\x42\x76\x5a\xbe\xa5\x32\xc5\xcc\xea\x92\xcf\x24\x2b\x52\xa5\xa7\x48\x72\xf2\x19\x00\xe1\x20\x0a\x4e\x3a\x83\xf0\xf8\x5d\xfd\x09\x00\x00\xff\xff\x67\x8c\x7e\x4b\x5e\x03\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 862, mode: os.FileMode(420), modTime: time.Unix(1434537973, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
